# This file is designed for production server deployment, not local development work
# For a containerized local dev environment, see: https://github.com/mastodon/mastodon/blob/main/README.md#docker

# You should check the Docker image tag used for the web, sidekiq, and streaming containers to make sure you are running
# the appropriate version for your deployment. Using `nightly` will deploy the in-development version of Mastodon, which is
# not considered a stable release. Visit https://github.com/mastodon/mastodon/releases for currently released versions and tags.

services:
  web:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    image: ghcr.io/mastodon/mastodon:nightly
    env_file: .env.production
    environment:
      - PORT=3000
      - BIND=127.0.0.1
    restart: always
    command: bundle exec puma -C config/puma.rb
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "curl -s --noproxy localhost localhost:3000/health | grep -q 'OK' || exit 1",
        ]
    networks:
      - external_network
      - internal_network
    ports:
      - '127.0.0.1:3000:3000'
    volumes:
      - ./public/system:/mastodon/public/system
    depends_on:
      - db
      - redis
      - es

  sidekiq:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    image: ghcr.io/mastodon/mastodon:nightly
    env_file: .env.production
    restart: always
    command: bundle exec sidekiq
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]
    networks:
      - external_network
      - internal_network
    volumes:
      - ./public/system:/mastodon/public/system
    depends_on:
      - db
      - redis
      - es

  streaming:
    # build:
    #   context: ./streaming
    #   dockerfile: Dockerfile
    image: ghcr.io/mastodon/mastodon-streaming:nightly
    env_file: .env.production
    environment:
      - PORT=4000
      - BIND=127.0.0.1
    restart: always
    command: node ./streaming/index.js
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "curl -s --noproxy localhost localhost:4000/api/v1/streaming/health | grep -q 'OK' || exit 1",
        ]
    networks:
      - external_network
      - internal_network
    ports:
      - '127.0.0.1:4000:4000'
    depends_on:
      - db
      - redis

  db:
    image: postgres:16-alpine
    restart: always
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    shm_size: 256mb
    networks:
      - internal_network
    volumes:
      - ./postgres16:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'

  redis:
    restart: always
    image: redis:7-alpine
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    networks:
      - internal_network
    volumes:
      - ./redis:/data

  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.21
    environment:
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true'
      - 'xpack.license.self_generated.type=basic'
      - 'xpack.security.enabled=false'
      - 'xpack.watcher.enabled=false'
      - 'xpack.graph.enabled=false'
      - 'xpack.ml.enabled=false'
      - 'bootstrap.memory_lock=true'
      - 'cluster.name=es-mastodon'
      - 'discovery.type=single-node'
      - 'thread_pool.write.queue_size=1000'
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    restart: always
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl --silent --fail localhost:9200/_cluster/health || exit 1',
        ]
    networks:
      - external_network
      - internal_network
    ports:
      - '127.0.0.1:9200:9200'
    volumes:
      - ./elasticsearch:/usr/share/elasticsearch/data

  # Uncomment the following section to enable Tor
  # tor:
  #   image: sirboops/tor
  #   networks:
  #      - external_network
  #      - internal_network

  # Uncomment the following section to enable Privoxy
  # privoxy:
  #   image: sirboops/privoxy
  #   networks:
  #     - external_network
  #     - internal_network
  #   volumes:
  #     - ./priv-config:/opt/config

networks:
  external_network:
  internal_network:
    internal: true
